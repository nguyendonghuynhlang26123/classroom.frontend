{"version":3,"sources":["pages/Auth/style.ts","assets/images/gg.svg","pages/Auth/Login.tsx"],"names":["sharedStyleSx","root","bgcolor","container","height","display","justifyContent","alignItems","paper","px","xs","sm","py","borderRadius","width","textAlign","my","form","mt","mb","signUpContainer","fontStyle","gap","cursor","divider","validationSchema","yup","email","required","password","LoginPage","search","useLocation","dispatch","useAppDispatch","navigate","useNavigate","React","useState","loading","setLoading","useAuth","signIn","signInWithGG","loginWithGg","useGoogleLogin","clientId","process","cookiePolicy","loginHint","onSuccess","response","console","log","tokenId","then","data","showMessage","message","formik","useFormik","initialValues","onSubmit","values","catch","e","type","Box","sx","Grow","appear","in","timeout","Container","Paper","elevation","square","Typography","variant","component","noValidate","autoComplete","handleSubmit","TextField","id","name","label","fullWidth","value","onChange","handleChange","error","touched","Boolean","errors","helperText","Button","size","aria-label","endIcon","CircularProgress","disabled","Stack","direction","Link","onClick","Divider","flexItem","color","startIcon","src","GoogleIcon","alt"],"mappings":"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","file":"static/js/13.6de095bc.chunk.js","sourcesContent":["import { MultipleSxTypes } from 'common/type';\r\n\r\nexport const sharedStyleSx: MultipleSxTypes = {\r\n  root: {\r\n    bgcolor: '#A2D2FF',\r\n  },\r\n  container: {\r\n    height: '100vh',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n  },\r\n  paper: {\r\n    px: {\r\n      xs: 2,\r\n      sm: 4,\r\n    },\r\n    py: 5,\r\n    borderRadius: 2,\r\n    width: 448,\r\n    textAlign: 'center',\r\n    '& .MuiButton-root': { my: 1, py: 1.2 },\r\n  },\r\n\r\n  form: {\r\n    mt: 3,\r\n    mb: 1,\r\n    '& .MuiTextField-root': { my: 1 },\r\n  },\r\n\r\n  signUpContainer: {\r\n    fontStyle: 'italic',\r\n    my: 2,\r\n    justifyContent: 'center',\r\n    gap: 0.5,\r\n    '& .MuiLink-root': { cursor: 'pointer' },\r\n  },\r\n\r\n  divider: {\r\n    my: 2,\r\n  },\r\n};\r\n","export default __webpack_public_path__ + \"static/media/gg.87be52cb.svg\";","import {\r\n  Container,\r\n  Grow,\r\n  Paper,\r\n  Typography,\r\n  Box,\r\n  Button,\r\n  Divider,\r\n  Link,\r\n  Stack,\r\n  TextField,\r\n  CircularProgress,\r\n} from '@mui/material';\r\nimport React from 'react';\r\nimport { useGoogleLogin } from 'react-google-login';\r\nimport { sharedStyleSx } from './style';\r\nimport GoogleIcon from 'assets/images/gg.svg';\r\nimport { useFormik } from 'formik';\r\nimport * as yup from 'yup';\r\nimport { useLocation, useNavigate } from 'react-router-dom';\r\nimport { useAuth } from 'components/context';\r\nimport { useAppDispatch } from 'store/hooks';\r\nimport { showMessage } from 'store/slices';\r\n\r\nconst GG_API_KEY = process.env.REACT_APP_GOOGLE_API_KEY as string;\r\n\r\nconst validationSchema = yup.object({\r\n  email: yup.string().email('This field should be a valid email').required('Please enter email'),\r\n  password: yup.string().required('Please Enter your password'),\r\n});\r\n\r\nconst LoginPage = () => {\r\n  const { search } = useLocation();\r\n  const dispatch = useAppDispatch();\r\n  const navigate = useNavigate();\r\n  const [loading, setLoading] = React.useState<boolean>(false);\r\n  const { signIn, signInWithGG } = useAuth();\r\n\r\n  const { signIn: loginWithGg } = useGoogleLogin({\r\n    clientId: GG_API_KEY,\r\n    // isSignedIn: true,\r\n    cookiePolicy: 'single_host_origin',\r\n    loginHint: 'Login with google',\r\n    onSuccess: (response: any) => {\r\n      console.log(response);\r\n      setLoading(true);\r\n      signInWithGG(response.tokenId).then((data) => {\r\n        dispatch(showMessage({ message: 'Login successfully' }));\r\n      });\r\n    },\r\n  });\r\n\r\n  const formik = useFormik({\r\n    initialValues: {\r\n      email: '',\r\n      password: '',\r\n    },\r\n    validationSchema: validationSchema,\r\n    onSubmit: (values) => {\r\n      signIn(values).catch((e) => {\r\n        dispatch(showMessage({ message: 'Invalid credentials', type: 'error' }));\r\n      });\r\n    },\r\n  });\r\n\r\n  const signUpOnClick = () => {\r\n    navigate('/auth/register' + search);\r\n  };\r\n\r\n  return (\r\n    <Box sx={sharedStyleSx.root}>\r\n      <Grow appear={true} in={true} timeout={500}>\r\n        <Container sx={sharedStyleSx.container}>\r\n          <Paper elevation={4} square sx={sharedStyleSx.paper}>\r\n            <Typography variant=\"h2\">ðŸŽ“</Typography>\r\n            <Typography variant=\"h5\">Moorssalc</Typography>\r\n            <Typography variant=\"body1\">Sign in </Typography>\r\n\r\n            <Box component=\"form\" noValidate autoComplete=\"off\" sx={sharedStyleSx.form} onSubmit={formik.handleSubmit}>\r\n              <TextField\r\n                id=\"email\"\r\n                name=\"email\"\r\n                label=\"Email\"\r\n                type=\"email\"\r\n                fullWidth\r\n                autoComplete=\"off\"\r\n                value={formik.values.email}\r\n                onChange={formik.handleChange}\r\n                error={formik.touched.email && Boolean(formik.errors.email)}\r\n                helperText={formik.touched.email && formik.errors.email}\r\n              />\r\n              <TextField\r\n                id=\"password\"\r\n                name=\"password\"\r\n                label=\"Password\"\r\n                type=\"password\"\r\n                fullWidth\r\n                autoComplete=\"off\"\r\n                value={formik.values.password}\r\n                onChange={formik.handleChange}\r\n                error={formik.touched.password && Boolean(formik.errors.password)}\r\n                helperText={formik.touched.password && formik.errors.password}\r\n              />\r\n              <Button\r\n                fullWidth\r\n                type=\"submit\"\r\n                size=\"large\"\r\n                variant=\"contained\"\r\n                aria-label=\"login with credentials\"\r\n                endIcon={loading && <CircularProgress size={16} />}\r\n                disabled={loading}\r\n              >\r\n                Sign in\r\n              </Button>\r\n            </Box>\r\n            <Stack direction=\"row\" sx={sharedStyleSx.signUpContainer}>\r\n              <Typography variant=\"body1\">Don't have account?</Typography>\r\n              <Link onClick={signUpOnClick}>Sign up</Link>\r\n            </Stack>\r\n            <Divider flexItem sx={sharedStyleSx.divider}>\r\n              or\r\n            </Divider>\r\n            <Button\r\n              fullWidth\r\n              variant=\"outlined\"\r\n              size=\"large\"\r\n              aria-label=\"Sign in with Google\"\r\n              color=\"error\"\r\n              startIcon={<img src={GoogleIcon} alt=\"Google Icon\" />}\r\n              onClick={() => {\r\n                loginWithGg();\r\n              }}\r\n            >\r\n              Login with Google\r\n            </Button>\r\n          </Paper>\r\n        </Container>\r\n      </Grow>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default LoginPage;\r\n"],"sourceRoot":""}